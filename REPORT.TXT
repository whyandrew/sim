CSCC85 - Embedded Systems

Project 2 - Lander Control
______________________________________________________________________

Team name: Magnetic Electrons

Name 1 (last, first): McGee, Pat
Student number 1: 0991724416

Name 2 (last, first): Wong, Andrew
Student number 2: 999369507

Name 3 (last, first): Chen, Patrick
Student number 3: 999064907

(special: Lose marks for not completing the above information)
_______________________________________________________________________

Please note below what parts of your task were completed, and for
incomplete tasks, give a brief description of progress and how
you think the task could be completed

a) The program can land the craft safely in mode '1'
  
   - for the 'easy.ppm' map (yes)
   - for the 'hard.ppm' map (yes)

   If it fails, describe the conditions in which it fails and how
   you think this could be resolved

b) The program can land the craft safely in mode '2'

   - for the 'easy.ppm' map (yes, mostly)
   - for the 'hard.ppm' map (yes, mostly)

   If it fails, describe the conditions in which it fails and how
   you think this could be resolved

   (5 7) - both Y velocity and Y position out
   May not works when starting position
   is in far left/right corner. Not very good in hard map


_______________________________________________________________________

Questions:

1) What was the impact of having noisy sensors in your ability to
   determine the state of the craft and ultimately control it 
   properly?

Sensor noise was not too big of an issue for the most part, partly
because of the way the simulation was set up (unlike in real life,
you can take as many samples as desired while time stays paused.)

2) Describe the technique(s) you used to deal with sensor noise

Taking numerous samples and averaging them.

3) Describe your strategy for dealing with thruster failures

Two thruster mode:
In cases where one side thruster is out and the main and other side
thrusters still work, the lander is tilted 45° such that the two
working thrusters each point 45° from straight down. In this situation
it turned out (surprisingly) that the control logic from the starter
code actually worked fine as-is.

Single thruster mode:
In cases where only one thruster works, or where the two side thrusters
work but the main one doesn't, the lander gets assigned a "home
orientation" such that one working thruster would point down.
This thruster is activated with a call to Single_Thruster, which also
ensures that no other working thruster fires. Whenever the starter code
would have activated the main thruster, Single_Thruster is run instead. 

A tilt adjustment is applied to this home orientation when horizontal
movement is needed. The tilt adjustment takes into account x velocity
and position (attempt at PID with no integral component) to try
to arrive over the landing pad without overshooting too much.

4) Describe your strategy for dealing with sensor malfunctions:

Position and velocity:
Bad sensors are detected by looking at the difference between
max and min values returned by the sensor. The random data from
a bad sensor has a much wider range of values.

   - Position sensors
Missing position information is calculated from the recorded
position and velocity information for the previous frame, with
an estimated displacement per frame factor.

   - Velocity sensors

  Predicted x and y acceleration are calculated for each frame
based on thruster power (recorded by logged wrapper functions)
and lander angle. We were not able to find a way to model
thruster noise, which would affect the accuracy of predicted
acceleration. 
  Missing X velocity is calculated from the velocity
and predicted acceleration recorded for the previous frame.
  For Y velocity, velocity is calculated using Position_Y, 
as error accumulation from acceleration->velocity->movement
over many frames become too large.
If Pos_Y sensor is also broken, Vel_Y will be estimated first
using acceleration when the accumulated error should still be small.
Then it'll switch to using Laser or Sonar, if they're available.
Basically calculated displacement per time to get velocity. But those
2 sensors also have limitation.


- Angle
The angle reading still gives angle data when it malfunctions,
but it's just noisier. To compensate, many more samples are
averaged.

- Sonar
Failures are a little tricky to detect since faulty sonar gives
the same readings as working sonar that's just out of range of
any terrain. Did not put much effort into distinguishing between
the two situations. The laser scans described below are done
regardless.

At regular intervals, the lander stops in place (~0 x velocity
and a slight upwards y velocity) and does a full 360° rotation,
taking RangeDist readings. Instead of emulating the 36-array
of the actual sonar, it just finds minimum distances for each
quadrant as used by Safety_Override. Between scans, these minimums
are adjusted for lander position change.

   What if you have multiple failures? what could you do if, for
   example both position and velocity sensors became inoperative?

With x position and x velocity out, calculating from previous values
and thruster power seems to work out alright. Y seems to be a much
bigger problem, for reasons we were not able to fully diagnose.

5) What was the hardest failure type to deal with (i.e. which is
   the component, either sensor or control that makes the lander
   harder to handle?)?

Y velocity seemed to be the most difficult, especially in combination
with Y position failiure.

6) Assume a human pilot was in charge of controlling the craft 
   (i.e. the pilot has control of thrusters and rotation).
   How would you change Safety_Override() so that it prevents
   the pilot from accidentally crashing the lander?
   
   Allow the ability of a manual overide for the human if needed
   
7) Do you think it is reasonable to write such a control function?
   (i.e. a routine that takes control from a human for their
    own safety)
    
    To some extent yes, since it has been proven to be effective when the software is written well.
    However there are cases where the software was written poorly and the computer takes control
    and kills the human. This could have been resolved if the human was able to have taken control
    over the vehicle and adjust accordingly.

8) Should the pilot be aware that this software is present?
   (yes or no, and tell me why you think so!)
   Yes, the pilot should know the inner workings of the system.
   If something bad happens they will know whether the computer will 
   try and take control to fix the situation or they have to adjust it themselves

9) Would you buy/drive a car that you know has control software
   that will take control from you if it estimates you are
   doing something dangerous?
   
   No, since the software could have bugs and scenarios that the developer didn't
   account for. It could think you're in danger and do something dangerous like 
   drive into a tree, when you were actually safe in the scenario.

10) Can you as an embedded systems designer think of every 
    possible scenario that could go wrong so as to write 
    control software that ALWAYS works?

    As learned in C01, its impossible to think of every possible test scenario.
    Life is random and there are infinite number of things that could occur that
    the designer didn't account for.
________________________________________________________________


Grading:

- Answers in this REPORT			/10
- Software to land craft in mode '1'		/40
- Software to land craft in mode '2'		/45
- Style and coding structure			/5

Total for Project #3				/100 (*)

(*) Mark is conditional on all members of the team being able
    to explain any component of the solution when asked.
